#!/usr/bin/env node

"use strict"
var arangojs = require("arangojs")
var execSync = require('child_process').execSync
var yaml = require('js-yaml')
var fs = require('fs')
var path = require('path')
var argv = require('yargs').argv
var pluralize = require('pluralize')
var crypto = require('crypto')
var colors = require('colors')
var hasbin = require('hasbin')
var version = '0.6.06'
var user_password = crypto.randomBytes(4).toString('hex');
const homedir = require('os').homedir();

const server = argv.server || 'foxxy'

var copyFileSync = function (src, dest) {
  fs.writeFileSync(dest, fs.readFileSync(src, {
    encoding: "utf8"
  }))
}

/**
 * copyRecursiveSync
 * @param {string} src ; The path to the thing to copy.
 * @param {string} dest ; The path to the new copy.
 * @param {string} model ; Model's name
 */
var copyRecursiveSync = function (src, dest, model) {
  var exists = fs.existsSync(src)
  var dirname = path.join(process.cwd(), argv._[1], "public") + "/"
  var stats = exists && fs.statSync(src)
  var isDirectory = exists && stats.isDirectory()
  if (exists && isDirectory) {
    if (!fs.existsSync(dest)) fs.mkdirSync(dest)
    fs.readdirSync(src).forEach(function (childItemName) {
      copyRecursiveSync(path.join(src, childItemName),
        path.join(dest, childItemName),
        model)
    })
  } else {
    copyFileSync(src, dest)
    replaceInFile(dest, /@\{\{dirname\}\}/g, dirname)
    replaceInFile(dest, /@\{\{password\}\}/g, user_password)
    if (model !== undefined) {
      replaceInFile(dest, /@\{\{object\}\}/g, model)
      replaceInFile(dest, /@\{\{objects\}\}/g, pluralize(model))
    }
  }
}

var deleteFolderRecursive = function (path) {
  if (fs.existsSync(path)) {
    fs.readdirSync(path).forEach(function (file, index) {
      var curPath = path + "/" + file
      if (fs.lstatSync(curPath).isDirectory()) { // recurse
        deleteFolderRecursive(curPath)
      } else { // delete file
        fs.unlinkSync(curPath)
      }
    })
    fs.rmdirSync(path)
  }
}

var generate = function (action, model) {
  if (["crud", "eu", "basic", "service", "upload", "cruds", "model"].indexOf(action) < 0) throw "No action found ! Please check manual..."
  if (action == "model") {
    var setup_js = `create_collection('${pluralize(argv._[2])}');\n`
    var setup_file = `${process.cwd()}/foxx/cruds/APP/scripts/setup.js`
    replaceInFile(setup_file, "/*@{{setup}}*/", setup_js + "\n/*@{{setup}}*/")
  } else {

    if (action == 'crud') action = 'cruds' // Ignore old crud method
    if (action == "upload") model = "upload"
    var arangoconf = yaml.safeLoad(fs.readFileSync(process.cwd() + "/.arangodb.yml"))
    var foxxyconf = {
      theme: "uikit2"
    }
    if (fs.existsSync(process.cwd() + "/.foxxy.yml")) {
      foxxyconf = yaml.safeLoad(fs.readFileSync(process.cwd() + "/.foxxy.yml"))
    }

    // First install foxx service
    var src_folder = path.join(__dirname, `../templates/${action}/foxx/widget`)
    var final_model_name = model
    if (action != "service") final_model_name = pluralize(model)
    var service_endpoint = final_model_name;
    if (action == 'cruds') service_endpoint = 'cruds'

    var dest_folder = process.cwd() + "/foxx/" + service_endpoint
    copyRecursiveSync(src_folder, dest_folder, model)

    // Widget
    console.log("Creating widget " + model)
    try {
      var src_file = path.join(__dirname, `../templates/${action}/riot/${foxxyconf.theme}_widget.html.tag`)
      var dest_file = path.join(process.cwd(), `app/widgets/${final_model_name}.html.tag`)
      copyFileSync(src_file, dest_file)
      replaceInFile(dest_file, /@\{\{object\}\}/g, model)
      replaceInFile(dest_file, /@\{\{objects\}\}/g, final_model_name)
    } catch (e) {}

    var dest_file = "";
    var src_file = "";

    if (action != "service") {
      dest_file = path.join(process.cwd(), `app/index.html`)
      var whtml = "require('widgets/" + final_model_name + ".html.tag');\n      /*@{{riot_components}}*/"
      replaceInFile(dest_file, /\/\*@\{\{riot_components\}\}\*\//g, whtml)
      replaceInFile(dest_file, /\{\{DBNAME\}\}/g, arangoconf.database)

      // Create Menu Item
      if (action != "upload") {
        replaceInFile(dest_file, "<!-- item_menu -->", `<li><a href="#${final_model_name}">${model[0].toUpperCase() +  final_model_name.slice(1)}</a></li>\n        <!-- item_menu -->`)
      }

      // Router
      dest_file = path.join(process.cwd(), `app/js/js.js`)
      src_file = path.join(__dirname, `../templates/${action}/router/router.js`)
      try {
        fs.statSync(src_file)
        var js = fs.readFileSync(src_file, {
          encoding: "utf8"
        })
        replaceInFile(dest_file, /\/\*@\{\{router\}\}\*\//g, js)
        replaceInFile(dest_file, /@\{\{object\}\}/g, model)
        replaceInFile(dest_file, /@\{\{objects\}\}/g, final_model_name)
      } catch (e) {}


      src_file = path.join(__dirname, `../templates/${action}/router/router_ca.js`)
      try {
        fs.statSync(src_file)
        var js = fs.readFileSync(src_file, {
          encoding: "utf8"
        })
        replaceInFile(dest_file, /\/\*@\{\{router_ca\}\}\*\//g, js)
        replaceInFile(dest_file, /@\{\{object\}\}/g, model)
        replaceInFile(dest_file, /@\{\{objects\}\}/g, final_model_name)
      } catch (e) {}

      src_file = path.join(__dirname, `../templates/${action}/router/router_cia.js`)
      try {
        fs.statSync(src_file)
        var js = fs.readFileSync(src_file, {
          encoding: "utf8"
        })
        replaceInFile(dest_file, /\/\*@\{\{router_cia\}\}\*\//g, js)
        replaceInFile(dest_file, /@\{\{object\}\}/g, model)
        replaceInFile(dest_file, /@\{\{objects\}\}/g, final_model_name)
      } catch (e) {}

      if (action == 'cruds') {
        var exists = fs.existsSync(path.join(process.cwd(), 'foxx/uploads'))
        if (!exists) generate('upload', 'upload') // Generate the upload service

        dest_file = path.join(process.cwd(), `foxx/cruds/APP/models/${final_model_name}.js`)
        src_file = path.join(__dirname, `../templates/${action}/foxx/widget/APP/models/model.sample.js`)
        copyFileSync(src_file, dest_file)

        var model_file = path.join(process.cwd(), `foxx/cruds/APP/models.js`)
        replaceInFile(model_file, "/*@{{models}}*/", final_model_name + ": require('./models/" + final_model_name + ".js')(),\n    /*@{{models}}*/")
        var setup_file = path.join(process.cwd(), `foxx/cruds/APP/scripts/setup.js`)
        var setup_js = `create_collection('${final_model_name}');\n`
        replaceInFile(setup_file, "/*@{{setup}}*/", setup_js + "\n/*@{{setup}}*/")
      }
    }

    install_service('/foxx/' + service_endpoint, arangoconf.database)
    console.log(action.toUpperCase() + " " + model + " created successfully!".green)
  }
}

var createDatabase = function (callback) {
  argv.user = argv.user || "root"
  argv.password = argv.password || ""
  argv.endpoint = argv.endpoint || "http+tcp://127.0.0.1:8529"
  argv.theme = argv.theme || "uikit3"

  var db = new arangojs.Database(argv.endpoint)
  db.useBasicAuth(argv.user, argv.password)
  db.createDatabase(argv.database)
    .then(function () {
      callback()
    })
}

var install_service = function (service, db_name, dev = true) {
  console.log(`Installing Foxx service [${service}]`.cyan)
  var dest_folder = path.join(process.cwd(), service)
  var endpoint = service.split('/')[service.split('/').length - 1]
  var cmd = `foxx uninstall --server ${server} --database ${db_name} /${endpoint};\n`
  cmd += `foxx install --server ${server} --database ${db_name} /${endpoint} ${dest_folder};\n`
  if (dev) cmd += `foxx set-dev --server ${server} --database ${db_name} /${endpoint}\n`
  execSync(cmd)
}

var upgrade_service = function (service, db_name, dev = true) {
  console.log(`Upgrading Foxx service [${service}]`.cyan)
  var dest_folder = path.join(process.cwd(), service)
  var endpoint = service.split('/')[service.split('/').length - 1]
  try {
    var cmd = `foxx upgrade --server ${server} --database ${db_name} /${endpoint} ${dest_folder};\n`
    execSync(cmd)
    if (dev) {
      cmd = `foxx set-dev --server ${server} --database ${db_name} /${endpoint}\n`
      execSync(cmd)
    }

  } catch (e) {
    // Fallback to install then
    console.log("Then installing /" + endpoint)
    var cmd = `foxx install --server ${server} --database ${db_name} /${endpoint} ${dest_folder};\n`
    execSync(cmd)
  }
}

var replaceInFile = function (filename, find, replace) {
  var data = fs.readFileSync(filename, {
    encoding: "utf8"
  })
  var result = data.replace(find, replace)
  fs.writeFileSync(filename, result)
}
var foxxy_welcome = `
███████╗ ██████╗ ██╗  ██╗██╗  ██╗██╗   ██╗
██╔════╝██╔═══██╗╚██╗██╔╝╚██╗██╔╝╚██╗ ██╔╝
█████╗  ██║   ██║ ╚███╔╝  ╚███╔╝  ╚████╔╝
██╔══╝  ██║   ██║ ██╔██╗  ██╔██╗   ╚██╔╝
██║     ╚██████╔╝██╔╝ ██╗██╔╝ ██╗   ██║
╚═╝      ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝
                                          `

console.log(foxxy_welcome.yellow)
console.log(('Version ' + version).yellow)
hasbin('foxx', function (result) {
  if (!result) {
    console.log("Please install foxx-cli first : npm install -g foxx-cli".red)
  } else {
    if (fs.existsSync(homedir + "/.foxxrc") && fs.readFileSync(homedir + "/.foxxrc").indexOf("[server.foxxy]") >= 0) {
      if (argv._.length == 0) {
        console.log("Usage : foxxy <command> <options> --database db_name --user username --password secret --endpoint http+tcp://127.0.0.1:8529".green)
        console.log("Samples :")
        console.log("- Create a new app : foxxy new app_name --database db_name --user username --password secret --endpoint http+tcp://127.0.0.1:8529")
        console.log("- - endpoint, username and password are not mandatory")
        console.log("- Generate a CRUD : foxxy g crud user")
        console.log("- Generate an Edit/Update only : foxxy g eu user")
        console.log("- Generate a basic service & widget : foxxy g basic user")
        console.log("- Generate a basic service only : foxxy g service user")
        //console.log("## hcrud : a CRUD widget within a Hierachical structure (tree)")
      } else {
        // Create a new application

        if (argv._[0] == "new") {
          if (argv._.length == 1 || argv.database === undefined) {
            console.log("Usage : foxxy new <app_name> --database db_name".red)
          } else {
            createDatabase(function () {
              var src_folder = path.join(__dirname, `../templates/${argv.theme}_app_skeleton`)
              var dest_folder = path.join(process.cwd(), argv._[1])

              fs.stat(dest_folder, function (err, stats) {
                if (err !== null) {
                  copyRecursiveSync(src_folder, dest_folder)
                  var dest_file = path.join(process.cwd(), `${argv._[1]}/app/index.html`)
                  replaceInFile(dest_file, /\{\{DBNAME\}\}/g, argv.database)

                  var dest_file = path.join(process.cwd(), `${argv._[1]}/app/login.html`)
                  replaceInFile(dest_file, /\{\{DBNAME\}\}/g, argv.database)
                  fs.writeFileSync(dest_folder + "/.arangodb.yml", yaml.safeDump({
                    database: argv.database,
                    username: argv.user,
                    password: argv.password,
                    endpoint: argv.endpoint
                  }))
                  fs.writeFileSync(dest_folder + "/.foxxy.yml", yaml.safeDump({
                    theme: argv.theme
                  }))

                  if (argv.no_widgets === undefined) {
                    src_folder = path.join(__dirname, '../templates/auth/foxx/widget')
                    dest_folder = path.join(process.cwd(), argv._[1] + "/foxx/auth")

                    copyRecursiveSync(src_folder, dest_folder)
                    install_service(argv._[1] + '/foxx/auth', argv.database)
                    console.log("User 'demo@foxxy.ovh' with password '" + user_password + "' created successfully".cyan)
                    console.log("App Created ! Grrrrr!".green)

                  } else {
                    console.log("App Created ! Grrrrr!".green)
                  }
                } else {
                  console.log("Folder already exists ... aborting ... ".red)
                }
              })
            });

          }
        }

        if (argv._[0] == "setup") {
          var arangoconf = yaml.safeLoad(fs.readFileSync(process.cwd() + "/.arangodb.yml"))
          if (argv._[1] != undefined) {
            install_service(`foxx/${argv._[1]}`, argv.database || arangoconf.database)
          } else {
            fs.readdir(process.cwd() + "/foxx", function (err, files) {
              files.forEach(function (file, index) {
                var stats = fs.statSync(process.cwd() + "/foxx/" + file)
                if (stats.isDirectory() && file != '_appbundles') {
                  install_service(`foxx/${file}`, argv.database || arangoconf.database)
                }
              })
            })
          }
        }

        if (argv._[0] == "upgrade") {
          var arangoconf = yaml.safeLoad(fs.readFileSync(process.cwd() + "/.arangodb.yml"))
          if (argv._[1] != undefined) {
            upgrade_service(`foxx/${argv._[1]}`, argv.database || arangoconf.database)
          } else {
            fs.readdir(process.cwd() + "/foxx", function (err, files) {
              files.forEach(function (file, index) {
                var stats = fs.statSync(process.cwd() + "/foxx/" + file)
                if (stats.isDirectory() && file != '_appbundles') {
                  upgrade_service(`foxx/${file}`, argv.database || arangoconf.database)
                }
              })
            })
          }
        }

        if (argv._[0] == "g") {
          if (argv._.length != 3) {
            console.log("Usage : foxxy g <type> <model>".red)
          } else {
            generate(argv._[1], argv._[2])
          }
        }
      }
    } else {
      console.log("You need to create a ~/.foxxrc file with the content below".red)
      console.log(`[server.foxxy]
      url=http://localhost:8529
      username=root
      password=`)
    }
  }
})

