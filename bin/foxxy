#!/usr/bin/env node
"use strict"

var exec = require('child_process').exec
var execSync = require('child_process').execSync
var yaml = require('js-yaml')
var fs = require('fs')
var path = require('path')
var argv = require('yargs').argv
var hasbin = require('hasbin')
var pluralize = require('pluralize')
var colors = require('colors')
var version = '0.5.47'
var user_password = +new Date()
var copyFileSync = function(src, dest) {
  fs.writeFileSync(dest, fs.readFileSync(src, { encoding: "utf8" }))
}

/**
 * copyRecursiveSync
 * @param {string} src ; The path to the thing to copy.
 * @param {string} dest ; The path to the new copy.
 * @param {string} model ; Model's name
 */
var copyRecursiveSync = function(src, dest, model) {
  var exists = fs.existsSync(src)
  var dirname = path.join(process.cwd(), argv._[1], "public") + "/"
  var stats = exists && fs.statSync(src)
  var isDirectory = exists && stats.isDirectory()
  if (exists && isDirectory) {
    fs.mkdirSync(dest)
    fs.readdirSync(src).forEach(function(childItemName) {
      copyRecursiveSync(path.join(src, childItemName),
                        path.join(dest, childItemName),
                        model)
    })
  } else {

    copyFileSync(src, dest)

    replaceInFile(dest, /@\{\{dirname\}\}/g, dirname)
    replaceInFile(dest, /@\{\{password\}\}/g, user_password)
    if(model !== undefined) {
      replaceInFile(dest, /@\{\{object\}\}/g, model)
      replaceInFile(dest, /@\{\{objects\}\}/g, pluralize(model))
    }
  }
}

var deleteFolderRecursive = function(path) {
  if( fs.existsSync(path) ) {
    fs.readdirSync(path).forEach(function(file,index){
      var curPath = path + "/" + file
      if(fs.lstatSync(curPath).isDirectory()) { // recurse
        deleteFolderRecursive(curPath)
      } else { // delete file
        fs.unlinkSync(curPath)
      }
    })
    fs.rmdirSync(path)
  }
}

var foxxAppsFolder = function() {
  // Brew OSX default install
  if(fs.existsSync('/usr/local/var/lib/arangodb3-apps')) {
    return '/usr/local/var/lib/arangodb3-apps'
  }

  // centOS7 and surely a lot of linux ditri
  if(fs.existsSync('/var/lib/arangodb3-apps')) {
    return '/var/lib/arangodb3-apps'
  }

  return ''
}

var generate = function(action, model) {
  if(["crud", "eu", "basic", "service", "upload", "cruds", "model"].indexOf(action) < 0) throw "No action found ! Please check manual..."
  if(action == "model") {
    var setup_js = `create_collection('${pluralize(argv._[2])}');\n`
    var setup_file = `${process.cwd()}/foxx/cruds/APP/scripts/setup.js`
    replaceInFile(setup_file, "/*@{{setup}}*/", setup_js + "\n/*@{{setup}}*/")
  } else {
    fs.mkdirSync(path.join(process.cwd(), "foxx_tmp"))
    if(action == 'crud') action = 'cruds' // Ignore old crud method
    if(action == "upload") model = "upload"
    var arangoconf = yaml.safeLoad(fs.readFileSync(process.cwd() + "/.arangodb.yml"))
    var foxxyconf = { theme: "uikit2" }
    if(fs.existsSync(process.cwd() + "/.foxxy.yml")) {
      foxxyconf = yaml.safeLoad(fs.readFileSync(process.cwd() + "/.foxxy.yml"))
    }
    // First install foxx service
    var src_folder = path.join(__dirname, `../templates/${action}/foxx/widget`)
    var final_model_name = model
    if(action != "service") final_model_name = pluralize(model)
    var dest_folder = process.cwd() +"/foxx_tmp/" + final_model_name
    copyRecursiveSync(src_folder, dest_folder, model)
    console.log("Installing Foxx service...".blue)
    var password = "--server.password \"\""
    if(arangoconf.password != "") password = `--server.password ${arangoconf.password}`
    var service_endpoint = final_model_name;
    if(action == 'cruds') service_endpoint = 'cruds'
    var cmd = `foxx-manager install ${dest_folder} /${service_endpoint} --server.endpoint ${arangoconf.endpoint} --server.database ${arangoconf.database} --server.username ${arangoconf.username} ${password};`
    cmd += `foxx-manager development /${service_endpoint} --server.endpoint ${arangoconf.endpoint} --server.database ${arangoconf.database} --server.username ${arangoconf.username} ${password}`
    // don't install service if already existing ... bug go ahead.
    if(fs.existsSync(process.cwd() + '/foxx/' + service_endpoint)) cmd = `echo ''`
    console.log("running : " + cmd)
    exec(cmd, function(error, stdout, stderr) {
      if(error) console.log(error.red)
      if(stdout) console.log(stdout.green)
      if(stderr) console.log(stderr.red)

      deleteFolderRecursive(path.join(process.cwd(), "foxx_tmp"))

      // Set dev mode
      var cmd = `foxx-manager development /${final_model_name} --server.endpoint ${arangoconf.endpoint} --server.database ${arangoconf.database} --server.username ${arangoconf.username} ${password}`
      exec(cmd, function(error, stdout, stderr) {})

      // Widget
      console.log("Creating widget " + model)
      try {
        var src_file = path.join(__dirname, `../templates/${action}/riot/${foxxyconf.theme}_widget.html.tag`)
        var dest_file = path.join(process.cwd(), `app/widgets/${final_model_name}.html.tag`)
        copyFileSync(src_file, dest_file)
        replaceInFile(dest_file, /@\{\{object\}\}/g, model)
        replaceInFile(dest_file, /@\{\{objects\}\}/g, final_model_name)
      } catch(e) {}

      if(action != "service") {
        dest_file= path.join(process.cwd(), `app/index.html`)
        var whtml = "require('widgets/"+final_model_name+".html.tag');\n      /*@{{riot_components}}*/"
        replaceInFile(dest_file, /\/\*@\{\{riot_components\}\}\*\//g, whtml)
        replaceInFile(dest_file, /\{\{DBNAME\}\}/g, arangoconf.database)

        // Create Menu Item
        if(action != "upload") {
          replaceInFile(dest_file, "<!-- item_menu -->", `<li><a href="#${final_model_name}">${model[0].toUpperCase() +  final_model_name.slice(1)}</a></li>\n        <!-- item_menu -->`)
        }

        // Router
        dest_file= path.join(process.cwd(), `app/js/js.js`)
        src_file = path.join(__dirname, `../templates/${action}/router/router.js`)
        try {
          fs.statSync(src_file)
          var js = fs.readFileSync(src_file, { encoding: "utf8" })
          replaceInFile(dest_file, /\/\*@\{\{router\}\}\*\//g, js)
          replaceInFile(dest_file, /@\{\{object\}\}/g, model)
          replaceInFile(dest_file, /@\{\{objects\}\}/g, final_model_name)
        } catch(e) {}


        src_file = path.join(__dirname, `../templates/${action}/router/router_ca.js`)
        try {
          fs.statSync(src_file)
          var js = fs.readFileSync(src_file, { encoding: "utf8" })
          replaceInFile(dest_file, /\/\*@\{\{router_ca\}\}\*\//g, js)
          replaceInFile(dest_file, /@\{\{object\}\}/g, model)
          replaceInFile(dest_file, /@\{\{objects\}\}/g, final_model_name)
        } catch(e) {}

        src_file = path.join(__dirname, `../templates/${action}/router/router_cia.js`)
        try {
          fs.statSync(src_file)
          var js = fs.readFileSync(src_file, { encoding: "utf8" })
          replaceInFile(dest_file, /\/\*@\{\{router_cia\}\}\*\//g, js)
          replaceInFile(dest_file, /@\{\{object\}\}/g, model)
          replaceInFile(dest_file, /@\{\{objects\}\}/g, final_model_name)
        } catch(e) {}

        // models (for CRUDs)
        if(action == 'cruds') {

          var exists = fs.existsSync(path.join(process.cwd(), 'foxx/uploads'))
          if(!exists) generate('upload', 'upload') // Generate the upload service
          dest_file= path.join(process.cwd(), `foxx/cruds/APP/models/${final_model_name}.js`)
          src_file = path.join(__dirname, `../templates/${action}/foxx/widget/APP/models/model.sample.js`)
          copyFileSync(src_file, dest_file)
          var model_file = path.join(process.cwd(), `foxx/cruds/APP/models.js`)
          replaceInFile(model_file, "/*@{{models}}*/", final_model_name + ": require('./models/"+final_model_name+".js')(),\n    /*@{{models}}*/")
          var setup_file = path.join(process.cwd(), `foxx/cruds/APP/scripts/setup.js`)
          var setup_js = `create_collection('${final_model_name}');\n`
          replaceInFile(setup_file, "/*@{{setup}}*/", setup_js + "\n/*@{{setup}}*/")
          var cmd = `foxx-manager setup /${service_endpoint} --server.endpoint ${arangoconf.endpoint} --server.database ${arangoconf.database} --server.username ${arangoconf.username} ${password}`
          execSync(cmd)
        }
      }
      console.log(action.toUpperCase() + " "+ model +" created successfully!".green)
    })
  }
}
// Install a new service. Useful for team development
var install_service = function(service) {
  console.log("Install Service " + service)
  var arangoconf = yaml.safeLoad(fs.readFileSync(process.cwd() + "/.arangodb.yml"))
  var cmd = `arangosh --javascript.execute-string "if(db._databases().indexOf('${arangoconf.database}') < 0) db._createDatabase('${arangoconf.database}');" --server.endpoint ${arangoconf.endpoint} --server.username ${arangoconf.username} ${arangoconf.password}`

  execSync(cmd)
  var password = "--server.password \"\""
  if(arangoconf.password != "") password = `--server.password ${arangoconf.password}`
  cmd = `cd foxx; rm -Rf tmp*; mv ${service} tmp; `
  cmd += `zip -r tmp.zip tmp;`
  cmd += "foxx-manager uninstall /"+service+" --server.endpoint "+arangoconf.endpoint+" --server.database "+arangoconf.database+" --server.username "+arangoconf.username+" "+password+";"
  cmd += "foxx-manager install tmp.zip /"+service+" --server.endpoint "+arangoconf.endpoint+" --server.database "+arangoconf.database+" --server.username "+arangoconf.username+" "+password+";"
  cmd += "foxx-manager development /"+service+" --server.endpoint "+arangoconf.endpoint+" --server.database "+arangoconf.database+" --server.username "+arangoconf.username+" "+password+";"
  cmd += `mv tmp ${service};`
  cmd += `rm -Rf ${service}/tmp;`
  cmd += `cd ..;`
  console.log(cmd)
  execSync(cmd)

}

const arangodb3AppsPath = foxxAppsFolder()

var replaceInFile = function(filename, find, replace) {
  var data = fs.readFileSync(filename, { encoding: "utf8" })
  var result = data.replace(find, replace)
  fs.writeFileSync(filename, result)
}
var foxxy_welcome = `
 ___
|  _|___ _ _ _ _ _ _
|  _| . |_'_|_'_| | |
|_| |___|_,_|_,_|_  |
                |___|`

console.log(foxxy_welcome.yellow)
console.log(('Version ' + version).yellow)

hasbin('foxx-manager', function(result) {
  if(result) {
    if(argv._.length == 0) {
      console.log("Usage : foxxy <command> <options> --database db_name --user username --password secret --endpoint http+tcp://127.0.0.1:8529".green)
      console.log("Samples :")
      console.log("- Create a new app : foxxy new app_name --database db_name --user username --password secret --endpoint http+tcp://127.0.0.1:8529")
      console.log("- - endpoint, username and password are not mandatory")
      console.log("- Generate a CRUD : foxxy g crud user")
      console.log("- Generate an Edit/Update only : foxxy g eu user")
      console.log("- Generate a basic service & widget : foxxy g basic user")
      console.log("- Generate a basic service only : foxxy g service user")


      //console.log("## hcrud : a CRUD widget within a Hierachical structure (tree)")
    } else {
      // Create a new application
      if(argv._[0] == "new") {
        if(argv._.length == 1 || argv.database === undefined) {
          console.log("Usage : foxxy new <app_name> --database db_name".red)
        } else {
          if(arangodb3AppsPath != '') {
            //execSync(`cp -Rf ${arangodb3AppsPath}/_db/${argv.database}/* ${path.join(process.cwd(), argv._[1] + "/foxx")}`)
            execSync(`rm -Rf ${arangodb3AppsPath}/_db/${argv.database}`)
            execSync(`ln -s ${path.join(process.cwd(), argv._[1] + "/foxx")} ${arangodb3AppsPath}/_db/${argv.database}`)
          } else {
            console.log("Beware! arangodb3AppsPath is not set".red)
          }

          // Initialize variables
          argv.user = argv.user || "root"
          argv.password = argv.password || ""
          argv.endpoint = argv.endpoint || "http+tcp://127.0.0.1:8529"
          argv.theme = argv.theme || "uikit3"

          // Create database if not exist
          var password = "--server.password \"\""
          if(argv.password != "") password = `--server.password ${argv.password}`
          var cmd = `arangosh --javascript.execute-string "if(db._databases().indexOf('${argv.database}') < 0) db._createDatabase('${argv.database}');" --server.endpoint ${argv.endpoint} --server.username ${argv.user} ${password}`
          console.log(cmd)
          exec(cmd, function(error, stdout, stderr) {
            var src_folder = path.join(__dirname, `../templates/${argv.theme}_app_skeleton`)
            var dest_folder = path.join(process.cwd(), argv._[1])

            fs.stat(dest_folder, function(err, stats) {
              if(err !== null) {
                copyRecursiveSync(src_folder, dest_folder)
                var dest_file = path.join(process.cwd(), `${argv._[1]}/app/index.html`)
                replaceInFile(dest_file, /\{\{DBNAME\}\}/g, argv.database)

                var dest_file = path.join(process.cwd(), `${argv._[1]}/app/login.html`)
                replaceInFile(dest_file, /\{\{DBNAME\}\}/g, argv.database)
                fs.writeFileSync(dest_folder + "/.arangodb.yml", yaml.safeDump({ database: argv.database, username: argv.user, password: argv.password, endpoint: argv.endpoint}))
                fs.writeFileSync(dest_folder + "/.foxxy.yml", yaml.safeDump({ theme: argv.theme }))

                if(argv.no_widgets === undefined) {
                  src_folder = path.join(__dirname, '../templates/auth/foxx/widget')
                  dest_folder = path.join(process.cwd(), argv._[1]+"/foxx_tmp/auth")
                  fs.mkdirSync(path.join(process.cwd(), argv._[1]+"/foxx_tmp"))

                  copyRecursiveSync(src_folder, dest_folder)
                  console.log("Installing Foxx service...".blue)
                  var password = "--server.password \"\""
                  if(argv.password != "") password = `--server.password ${argv.password}`
                  var cmd = `foxx-manager install ${dest_folder} /auth --server.endpoint ${argv.endpoint} --server.database ${argv.database} --server.username ${argv.user} ${password}`
                  console.log("running : " + cmd)
                  exec(cmd, function(error, stdout, stderr) {
                    if(error) console.log(error.red)
                    if(stdout) console.log(stdout.green)
                    if(stderr) console.log(stderr.red)
                    deleteFolderRecursive(path.join(process.cwd(), argv._[1]+"/foxx_tmp"))

                    // Set dev mode
                    var cmd = `foxx-manager development /auth --server.endpoint ${argv.endpoint} --server.database ${argv.database} --server.username ${argv.user} ${password}`
                    exec(cmd, function(error, stdout, stderr) {
                      console.log("User 'demo@foxxy.ovh' with password '"+user_password+"' created successfully".cyan)
                      console.log("App Created ! Grrrrr!".green)
                      if(arangodb3AppsPath == '') {

                        console.log("\nNow move auth foxx app and create a symlink to your arangodb app path from your app foxx folder")

                        var cmd = `cp -Rf /usr/local/var/lib/arangodb3-apps/_db/${argv.database}/* ${path.join(process.cwd(), argv._[1] + "/foxx")}`
                        console.log(cmd.cyan)
                        cmd = `rm -Rf /usr/local/var/lib/arangodb3-apps/_db/${argv.database}`
                        console.log(cmd.cyan)
                        cmd = `ln -s ${path.join(process.cwd(), argv._[1] + "/foxx")} /usr/local/var/lib/arangodb3-apps/_db/${argv.database}`
                        console.log(cmd.cyan)

                      }

                    })
                  })

                } else {
                  console.log("App Created ! Grrrrr!".green)
                }
              } else {
                console.log("Folder already exists ... aborting ... ".red)
              }
            })
          })
        }
      }

      if(argv._[0] == "symlinks") {
        var arangoconf = yaml.safeLoad(fs.readFileSync(process.cwd() + "/.arangodb.yml"))
        console.log(arangoconf)
        var password = "--server.password \"\""
        if(arangoconf.password != "") password = `--server.password ${arangoconf.password}`
        var cmd = `arangosh --javascript.execute-string "if(db._databases().indexOf('${arangoconf.database}') < 0) db._createDatabase('${arangoconf.database}');" --server.endpoint ${arangoconf.endpoint} --server.username ${arangoconf.user} ${password}`
        //console.log(cmd)
        exec(cmd, function(error, stdout, stderr) {
          if(arangodb3AppsPath != '') {
            execSync(`rm -Rf ${arangodb3AppsPath}/_db/${arangoconf.database}`)
            execSync(`ln -s ${path.join(process.cwd(), "/foxx")} ${arangodb3AppsPath}/_db/${arangoconf.database}`)
          } else {
            console.log("Sorry, arangodb3AppsPath is not set".red)
          }
        })
      }

      if(argv._[0] == "setup") {
        var arangoconf = yaml.safeLoad(fs.readFileSync(process.cwd() + "/.arangodb.yml"))
        fs.readdir(process.cwd() + "/foxx", function(err, files) {
          files.forEach(function(file, index) {
            var stats = fs.statSync(process.cwd() + "/foxx/" + file)
            if(stats.isDirectory()) {
              install_service(file)
            }
          })
          exec("rm foxx/tmp.zip", function(error, stdout, stderr) {})
        })
      }

      if(argv._[0] == "g") {
        if(argv._.length != 3) {
          console.log("Usage : foxxy g <type> <model>".red)
        } else {
          generate(argv._[1], argv._[2])
        }
      }

    }
  } else {
    console.log("You need first to install ArangoDB : https://www.arangodb.com/")
    console.log("On OSX : brew update && brew install arangodb")
  }
})
//console.log(fs.readFileSync("../package.json"))



